package swp391.code.swp391.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import swp391.code.swp391.dto.ChangeChargingPointRequestDTO;
import swp391.code.swp391.dto.ChangeChargingPointResponseDTO;
import swp391.code.swp391.dto.ChargingPointDTO;
import swp391.code.swp391.entity.*;
import swp391.code.swp391.entity.ChargingPoint.ChargingPointStatus;
import swp391.code.swp391.repository.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class StaffServiceImpl implements StaffService {

    private final OrderRepository orderRepository;
    private final ChargingPointRepository chargingPointRepository;
    private final UserRepository userRepository;
    private final NotificationService notificationService;

    @Override
    @Transactional
    public ChangeChargingPointResponseDTO changeChargingPointForDriver(ChangeChargingPointRequestDTO request) {

        log.info("Starting change charging point process for order: {}", request.getOrderId());

        // 1. Validate Order
        Order order = orderRepository.findByOrderId(request.getOrderId());
        if (order == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ch·ªó v·ªõi ID: " + request.getOrderId());
        }

        // 2. Ki·ªÉm tra tr·∫°ng th√°i order (ch·ªâ cho ph√©p ƒë·ªïi khi BOOKED - ch∆∞a b·∫Øt ƒë·∫ßu s·∫°c)
        if (order.getStatus() != Order.Status.BOOKED) {
            throw new RuntimeException(
                    String.format("Kh√¥ng th·ªÉ ƒë·ªïi tr·ª• s·∫°c cho ƒë∆°n c√≥ tr·∫°ng th√°i: %s. Ch·ªâ cho ph√©p ƒë·ªïi khi tr·∫°ng th√°i BOOKED",
                            order.getStatus())
            );
        }

        // 3. Ki·ªÉm tra th·ªùi gian - ch·ªâ cho ph√©p ƒë·ªïi tr∆∞·ªõc gi·ªù b·∫Øt ƒë·∫ßu
        if (LocalDateTime.now().isAfter(order.getStartTime())) {
            throw new RuntimeException("Kh√¥ng th·ªÉ ƒë·ªïi tr·ª• s·∫°c sau th·ªùi gian b·∫Øt ƒë·∫ßu ƒë√£ ƒë·∫∑t");
        }

        // 4. Validate Current Charging Point
        ChargingPoint currentPoint = chargingPointRepository.findById(request.getCurrentChargingPointId())
                .orElseThrow(() -> new RuntimeException(
                        "Kh√¥ng t√¨m th·∫•y tr·ª• s·∫°c hi·ªán t·∫°i v·ªõi ID: " + request.getCurrentChargingPointId()));

        // 5. Ki·ªÉm tra current point c√≥ ph·∫£i c·ªßa order n√†y kh√¥ng
        if (!order.getChargingPoint().getChargingPointId().equals(currentPoint.getChargingPointId())) {
            throw new RuntimeException(
                    String.format("Tr·ª• s·∫°c ID %d kh√¥ng ph·∫£i l√† tr·ª• s·∫°c c·ªßa ƒë∆°n ƒë·∫∑t ch·ªó n√†y",
                            request.getCurrentChargingPointId())
            );
        }

        // 6. Validate New Charging Point
        ChargingPoint newPoint = chargingPointRepository.findById(request.getNewChargingPointId())
                .orElseThrow(() -> new RuntimeException(
                        "Kh√¥ng t√¨m th·∫•y tr·ª• s·∫°c m·ªõi v·ªõi ID: " + request.getNewChargingPointId()));

        // 7. Ki·ªÉm tra tr·ª• m·ªõi c√≥ c√πng station kh√¥ng
        if (!currentPoint.getStation().getStationId().equals(newPoint.getStation().getStationId())) {
            throw new RuntimeException(
                    String.format("Tr·ª• s·∫°c m·ªõi ph·∫£i n·∫±m trong c√πng tr·∫°m s·∫°c: %s",
                            currentPoint.getStation().getStationName())
            );
        }

        // 8. Ki·ªÉm tra tr·ª• m·ªõi c√≥ c√πng lo·∫°i connector kh√¥ng
        if (!currentPoint.getConnectorType().getConnectorTypeId()
                .equals(newPoint.getConnectorType().getConnectorTypeId())) {
            throw new RuntimeException(
                    String.format("Tr·ª• s·∫°c m·ªõi ph·∫£i c√≥ c√πng lo·∫°i connector: %s. Tr·ª• b·∫°n ch·ªçn c√≥ connector: %s",
                            currentPoint.getConnectorType().getTypeName(),
                            newPoint.getConnectorType().getTypeName())
            );
        }

        // 9. Ki·ªÉm tra tr·ª• m·ªõi c√≥ available kh√¥ng
        if (newPoint.getStatus() != ChargingPointStatus.AVAILABLE) {
            throw new RuntimeException(
                    String.format("Tr·ª• s·∫°c m·ªõi kh√¥ng ·ªü tr·∫°ng th√°i AVAILABLE. Tr·∫°ng th√°i hi·ªán t·∫°i: %s",
                            newPoint.getStatus())
            );
        }

        // 10. Ki·ªÉm tra tr·ª• m·ªõi c√≥ b·ªã tr√πng th·ªùi gian v·ªõi booking kh√°c kh√¥ng
        List<Order> conflictingOrders = orderRepository.findConflictingOrders(
                newPoint.getChargingPointId(),
                order.getStartTime(),
                order.getEndTime(),
                order.getOrderId()
        );

        if (!conflictingOrders.isEmpty()) {
            throw new RuntimeException(
                    String.format("Tr·ª• s·∫°c m·ªõi ƒë√£ c√≥ booking kh√°c trong khung gi·ªù %s - %s",
                            order.getStartTime(), order.getEndTime())
            );
        }

        // 11. C·∫≠p nh·∫≠t Order v·ªõi Charging Point m·ªõi
        ChargingPoint oldPoint = order.getChargingPoint();
        order.setChargingPoint(newPoint);
        orderRepository.save(order);

        log.info("Updated order {} from charging point {} to {}",
                order.getOrderId(), oldPoint.getChargingPointId(), newPoint.getChargingPointId());

        // 12. C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c tr·ª• s·∫°c
        // N·∫øu current point ƒëang RESERVED, ƒë·ªïi v·ªÅ AVAILABLE
        if (currentPoint.getStatus() == ChargingPointStatus.RESERVED) {
            currentPoint.setStatus(ChargingPointStatus.AVAILABLE);
            chargingPointRepository.save(currentPoint);
            log.info("Released charging point {} to AVAILABLE", currentPoint.getChargingPointId());
        }

        // ƒê·∫∑t tr·ª• m·ªõi th√†nh RESERVED
        newPoint.setStatus(ChargingPointStatus.RESERVED);
        chargingPointRepository.save(newPoint);
        log.info("Reserved new charging point {}", newPoint.getChargingPointId());

        // 13. L·∫•y th√¥ng tin Staff
        User staff = null;
        String staffName = "System";
        if (request.getStaffId() != null) {
            staff = userRepository.findById(request.getStaffId()).orElse(null);
            if (staff != null) {
                staffName = staff.getFullName();
            }
        }

        // 14. G·ª≠i th√¥ng b√°o cho Driver
        String notificationContent = String.format(
                "üîÑ Th√¥ng b√°o ƒë·ªïi tr·ª• s·∫°c\n\n" +
                        "Tr·ª• s·∫°c c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi:\n" +
                        "‚Ä¢ T·ª´: Tr·ª• #%d\n" +
                        "‚Ä¢ Sang: Tr·ª• #%d\n" +
                        "‚Ä¢ Tr·∫°m: %s\n" +
                        "‚Ä¢ Lo·∫°i connector: %s (%.1f kW)\n" +
                        "‚Ä¢ Th·ªùi gian: %s - %s\n" +
                        "‚Ä¢ L√Ω do: %s\n" +
                        "‚Ä¢ Th·ª±c hi·ªán b·ªüi: %s\n\n" +
                        "Vui l√≤ng ƒë·∫øn ƒë√∫ng tr·ª• s·∫°c m·ªõi!",
                currentPoint.getChargingPointId(),
                newPoint.getChargingPointId(),
                newPoint.getStation().getStationName(),
                newPoint.getConnectorType().getTypeName(),
                newPoint.getConnectorType().getPowerOutput(),
                order.getStartTime(),
                order.getEndTime(),
                request.getReason() != null ? request.getReason() : "Driver tr∆∞·ªõc ch∆∞a r√∫t s·∫°c ra",
                staffName
        );

        boolean notificationSent = false;
        try {
            // G·ª≠i notification tr·ª±c ti·∫øp cho user c·ªßa order
            notificationService.createGeneralNotification(
                    List.of(order.getUser().getUserId()),
                    "ƒê·ªïi tr·ª• s·∫°c - Order #" + order.getOrderId(),
                    notificationContent
            );
            notificationSent = true;
            log.info("Notification sent to driver (User ID: {}) for order: {}",
                    order.getUser().getUserId(), order.getOrderId());
        } catch (Exception e) {
            log.error("Failed to send notification to driver: {}", e.getMessage());
            // Kh√¥ng throw exception, v·∫´n tr·∫£ v·ªÅ success v√¨ vi·ªác ƒë·ªïi tr·ª• ƒë√£ th√†nh c√¥ng
        }

        // 15. T·∫°o response
        return ChangeChargingPointResponseDTO.builder()
                .orderId(order.getOrderId())
                .oldChargingPointId(currentPoint.getChargingPointId())
                .oldChargingPointInfo(String.format("Tr·ª• #%d - %s - %.1f kW",
                        currentPoint.getChargingPointId(),
                        currentPoint.getConnectorType().getTypeName(),
                        currentPoint.getConnectorType().getPowerOutput()))
                .newChargingPointId(newPoint.getChargingPointId())
                .newChargingPointInfo(String.format("Tr·ª• #%d - %s - %.1f kW",
                        newPoint.getChargingPointId(),
                        newPoint.getConnectorType().getTypeName(),
                        newPoint.getConnectorType().getPowerOutput()))
                .driverName(order.getUser().getFullName())
                .driverId(order.getUser().getUserId())
                .reason(request.getReason())
                .changedAt(LocalDateTime.now())
                .changedByStaff(staffName)
                .notificationSent(notificationSent)
                .message(notificationSent
                        ? "ƒê·ªïi tr·ª• s·∫°c th√†nh c√¥ng v√† ƒë√£ th√¥ng b√°o cho driver"
                        : "ƒê·ªïi tr·ª• s·∫°c th√†nh c√¥ng nh∆∞ng g·ª≠i th√¥ng b√°o th·∫•t b·∫°i")
                .build();
    }

    @Override
    public List<ChargingPointDTO> findAlternativeChargingPoints(Long orderId, Long currentChargingPointId) {

        log.info("Finding alternative charging points for order: {}", orderId);

        // 1. L·∫•y th√¥ng tin order
        Order order = orderRepository.findByOrderId(orderId);
        if (order == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ch·ªó v·ªõi ID: " + orderId);
        }

        // 2. Ki·ªÉm tra tr·∫°ng th√°i order
        if (order.getStatus() != Order.Status.BOOKED) {
            throw new RuntimeException(
                    String.format("Kh√¥ng th·ªÉ t√¨m tr·ª• thay th·∫ø cho ƒë∆°n c√≥ tr·∫°ng th√°i: %s", order.getStatus())
            );
        }

        // 3. L·∫•y th√¥ng tin current charging point
        ChargingPoint currentPoint = chargingPointRepository.findById(currentChargingPointId)
                .orElseThrow(() -> new RuntimeException(
                        "Kh√¥ng t√¨m th·∫•y tr·ª• s·∫°c v·ªõi ID: " + currentChargingPointId));

        Long stationId = currentPoint.getStation().getStationId();
        Long connectorTypeId = currentPoint.getConnectorType().getConnectorTypeId();

        // 4. T√¨m c√°c tr·ª• s·∫°c thay th·∫ø: c√πng station, c√πng connector type, status = AVAILABLE
        List<ChargingPoint> allAvailablePoints = chargingPointRepository
                .findByStation_StationIdAndConnectorType_ConnectorTypeIdAndStatus(
                        stationId,
                        connectorTypeId,
                        ChargingPointStatus.AVAILABLE
                );

        // 5. L·ªçc ra c√°c tr·ª• kh√¥ng tr√πng th·ªùi gian v·ªõi order kh√°c
        List<ChargingPoint> alternativePoints = allAvailablePoints.stream()
                .filter(point -> {
                    // Lo·∫°i b·ªè tr·ª• hi·ªán t·∫°i
                    if (point.getChargingPointId().equals(currentChargingPointId)) {
                        return false;
                    }

                    // Ki·ªÉm tra xem tr·ª• n√†y c√≥ b·ªã tr√πng l·ªãch kh√¥ng
                    List<Order> conflicts = orderRepository.findConflictingOrders(
                            point.getChargingPointId(),
                            order.getStartTime(),
                            order.getEndTime(),
                            order.getOrderId()
                    );

                    return conflicts.isEmpty();
                })
                .collect(Collectors.toList());

        log.info("Found {} alternative charging points for order {}", alternativePoints.size(), orderId);

        // 6. Convert sang DTO - CH·ªà TR·∫¢ V·ªÄ ID, KH√îNG TR·∫¢ V·ªÄ NESTED OBJECT
        return alternativePoints.stream()
                .map(point -> {
                    ChargingPointDTO dto = new ChargingPointDTO();
                    dto.setChargingPointId(point.getChargingPointId());
                    dto.setStatus(point.getStatus());
                    dto.setStationId(point.getStation().getStationId()); // CH·ªà ID
                    dto.setConnectorTypeId(point.getConnectorType().getConnectorTypeId()); // CH·ªà ID
                    dto.setTypeName(point.getConnectorType().getTypeName());
                    dto.setPowerOutput(point.getConnectorType().getPowerOutput());
                    dto.setPricePerKwh(point.getConnectorType().getPricePerKWh());
                    // KH√îNG SET station v√† connectorType object ƒë·ªÉ tr√°nh circular reference
                    return dto;
                })
                .collect(Collectors.toList());
    }
}